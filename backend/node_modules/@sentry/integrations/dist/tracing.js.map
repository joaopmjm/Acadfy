{"version":3,"file":"tracing.js","sourceRoot":"","sources":["../src/tracing.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventProcessor, Hub, Integration } from '@sentry/types';\nimport { fill, getGlobalObject, isMatchingPattern, logger, supportsNativeFetch } from '@sentry/utils';\n\n/** JSDoc */\ninterface TracingOptions {\n  tracingOrigins?: Array<string | RegExp>;\n  traceFetch?: boolean;\n  traceXHR?: boolean;\n  autoStartOnDomReady?: boolean;\n}\n\n/**\n * Tracing Integration\n */\nexport class Tracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Tracing.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Tracing';\n\n  /**\n   * If we have an xhr we need to store the url in the instance.\n   *\n   */\n  // @ts-ignore\n  private _xhrUrl?: string;\n\n  /**\n   * Constructor for Tracing\n   *\n   * @param _options TracingOptions\n   */\n  public constructor(private readonly _options: TracingOptions = {}) {\n    if (!Array.isArray(_options.tracingOrigins) || _options.tracingOrigins.length === 0) {\n      const defaultTracingOrigins = ['localhost', /^\\//];\n      logger.warn(\n        'Sentry: You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n      );\n      logger.warn(`Sentry: We added a reasonable default for you: ${defaultTracingOrigins}`);\n      _options.tracingOrigins = defaultTracingOrigins;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (this._options.traceXHR !== false) {\n      this._traceXHR(getCurrentHub);\n    }\n    if (this._options.traceFetch !== false) {\n      this._traceFetch(getCurrentHub);\n    }\n    if (this._options.autoStartOnDomReady !== false) {\n      getGlobalObject<Window>().addEventListener('DOMContentLoaded', () => {\n        Tracing.startTrace(getCurrentHub(), getGlobalObject<Window>().location.href);\n      });\n      getGlobalObject<Window>().document.onreadystatechange = () => {\n        if (document.readyState === 'complete') {\n          Tracing.startTrace(getCurrentHub(), getGlobalObject<Window>().location.href);\n        }\n      };\n    }\n  }\n\n  /**\n   * Starts a new trace\n   * @param hub The hub to start the trace on\n   * @param transaction Optional transaction\n   */\n  public static startTrace(hub: Hub, transaction?: string): void {\n    hub.configureScope(scope => {\n      scope.startSpan();\n      scope.setTransaction(transaction);\n    });\n  }\n\n  /**\n   * JSDoc\n   */\n  private _traceXHR(getCurrentHub: () => Hub): void {\n    if (!('XMLHttpRequest' in getGlobalObject<Window>())) {\n      return;\n    }\n\n    const xhrproto = XMLHttpRequest.prototype;\n\n    fill(\n      xhrproto,\n      'open',\n      originalOpen =>\n        function(this: XMLHttpRequest, ...args: any[]): void {\n          // @ts-ignore\n          const self = getCurrentHub().getIntegration(Tracing);\n          if (self) {\n            self._xhrUrl = args[1] as string;\n          }\n          // tslint:disable-next-line: no-unsafe-any\n          return originalOpen.apply(this, args);\n        },\n    );\n\n    fill(\n      xhrproto,\n      'send',\n      originalSend =>\n        function(this: XMLHttpRequest, ...args: any[]): void {\n          // @ts-ignore\n          const self = getCurrentHub().getIntegration(Tracing);\n          if (self && self._xhrUrl && self._options.tracingOrigins) {\n            const url = self._xhrUrl;\n            const headers = getCurrentHub().traceHeaders();\n            // tslint:disable-next-line: prefer-for-of\n            const isWhitelisted = self._options.tracingOrigins.some((origin: string | RegExp) =>\n              isMatchingPattern(url, origin),\n            );\n\n            if (isWhitelisted && this.setRequestHeader) {\n              Object.keys(headers).forEach(key => {\n                this.setRequestHeader(key, headers[key]);\n              });\n            }\n          }\n          // tslint:disable-next-line: no-unsafe-any\n          return originalSend.apply(this, args);\n        },\n    );\n  }\n\n  /**\n   * JSDoc\n   */\n  private _traceFetch(getCurrentHub: () => Hub): void {\n    if (!supportsNativeFetch()) {\n      return;\n    }\n\n    // tslint:disable: only-arrow-functions\n    fill(getGlobalObject<Window>(), 'fetch', function(originalFetch: () => void): () => void {\n      return function(...args: any[]): void {\n        // @ts-ignore\n        const self = getCurrentHub().getIntegration(Tracing);\n        if (self && self._options.tracingOrigins) {\n          const url = args[0] as string;\n          const options = (args[1] = (args[1] as { [key: string]: any }) || {});\n\n          let whiteListed = false;\n          self._options.tracingOrigins.forEach((whiteListUrl: string | RegExp) => {\n            if (!whiteListed) {\n              whiteListed = isMatchingPattern(url, whiteListUrl);\n            }\n          });\n\n          if (whiteListed) {\n            if (options.headers) {\n              if (Array.isArray(options.headers)) {\n                options.headers = [...options.headers, ...Object.entries(getCurrentHub().traceHeaders())];\n              } else {\n                options.headers = {\n                  ...options.headers,\n                  ...getCurrentHub().traceHeaders(),\n                };\n              }\n            } else {\n              options.headers = getCurrentHub().traceHeaders();\n            }\n          }\n        }\n        // tslint:disable-next-line: no-unsafe-any\n        return originalFetch.apply(getGlobalObject<Window>(), args);\n      };\n    });\n    // tslint:enable: only-arrow-functions\n  }\n}\n"]}