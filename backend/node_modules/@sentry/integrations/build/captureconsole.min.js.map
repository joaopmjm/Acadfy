{"version":3,"file":"captureconsole.min.js","sources":["../../types/src/loglevel.ts","../../types/src/severity.ts","../../types/src/status.ts","../../utils/src/polyfill.ts","../../utils/src/error.ts","../../utils/src/is.ts","../../utils/src/misc.ts","../../utils/src/logger.ts","../../utils/src/syncpromise.ts","../../utils/src/memo.ts","../../utils/src/string.ts","../../utils/src/object.ts","../src/captureconsole.ts"],"sourcesContent":["/** Console logging verbosity for the SDK. */\nexport enum LogLevel {\n  /** No logs will be generated. */\n  None = 0,\n  /** Only SDK internal errors will be logged. */\n  Error = 1,\n  /** Information useful for debugging the SDK will be logged. */\n  Debug = 2,\n  /** All SDK actions will be logged. */\n  Verbose = 3,\n}\n","/** JSDoc */\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n// tslint:disable:completed-docs\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace Severity {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  export function fromString(level: string): Severity {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n      case 'info':\n        return Severity.Info;\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n      case 'error':\n        return Severity.Error;\n      case 'fatal':\n        return Severity.Fatal;\n      case 'critical':\n        return Severity.Critical;\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n}\n","/** The status of an event. */\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n}\n// tslint:disable:completed-docs\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n","export const setPrototypeOf =\n  Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties); // tslint:disable-line:no-unbound-method\n\n/**\n * setPrototypeOf polyfill using __proto__\n */\nfunction setProtoOf<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  // @ts-ignore\n  obj.__proto__ = proto;\n  return obj as TTarget & TProto;\n}\n\n/**\n * setPrototypeOf polyfill using mixin\n */\nfunction mixinProperties<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  for (const prop in proto) {\n    if (!obj.hasOwnProperty(prop)) {\n      // @ts-ignore\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj as TTarget & TProto;\n}\n","import { setPrototypeOf } from './polyfill';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    // tslint:disable:no-unsafe-any\n    this.name = new.target.prototype.constructor.name;\n    setPrototypeOf(this, new.target.prototype);\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: any): boolean {\n  switch (Object.prototype.toString.call(wat)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return wat instanceof Error;\n  }\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMError]';\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMException]';\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object String]';\n}\n\n/**\n * Checks whether given value's is a primitive (undefined, null, number, boolean, string)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: any): boolean {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object Object]';\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: any): wat is Event {\n  // tslint:disable-next-line:strict-type-predicates\n  return typeof Event !== 'undefined' && wat instanceof Event;\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: any): wat is Element {\n  // tslint:disable-next-line:strict-type-predicates\n  return typeof Element !== 'undefined' && wat instanceof Element;\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object RegExp]';\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): boolean {\n  // tslint:disable:no-unsafe-any\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n  // tslint:enable:no-unsafe-any\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: any): boolean {\n  // tslint:disable-next-line:no-unsafe-any\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n","/// <reference lib=\"dom\" />\n\nimport { Event, Integration, WrappedFunction } from '@sentry/types';\n\nimport { isString } from './is';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\n/**\n * Requires a module which is protected _against bundler minification.\n *\n * @param request The module path to resolve\n */\nexport function dynamicRequire(mod: any, request: string): any {\n  // tslint:disable-next-line: no-unsafe-any\n  return mod.require(request);\n}\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // tslint:disable:strict-type-predicates\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (isNodeEnv()\n    ? global\n    : typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : fallbackGlobalObject) as T & SentryGlobal;\n}\n// tslint:enable:strict-type-predicates\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // tslint:disable-next-line:no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // tslint:disable-next-line:no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // tslint:disable-next-line:no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  if (event.message) {\n    return event.message;\n  }\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    }\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n  return event.event_id || '<unknown>';\n}\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/** JSDoc */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n  const levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  levels.forEach(level => {\n    if (level in global.console && (originalConsole[level] as WrappedFunction).__sentry__) {\n      wrappedLevels[level] = (originalConsole[level] as WrappedFunction).__sentry_wrapped__;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n\n/**\n * Adds exception mechanism to a given event.\n * @param event The event to modify.\n * @param mechanism Mechanism of the mechanism.\n * @hidden\n */\nexport function addExceptionMechanism(\n  event: Event,\n  mechanism: {\n    [key: string]: any;\n  } = {},\n): void {\n  // TODO: Use real type with `keyof Mechanism` thingy and maybe make it better?\n  try {\n    // @ts-ignore\n    // tslint:disable:no-non-null-assertion\n    event.exception!.values![0].mechanism = event.exception!.values![0].mechanism || {};\n    Object.keys(mechanism).forEach(key => {\n      // @ts-ignore\n      event.exception!.values![0].mechanism[key] = mechanism[key];\n    });\n  } catch (_oO) {\n    // no-empty\n  }\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: Node): string {\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem: Node | null = elem;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem as HTMLElement);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(elem: HTMLElement): string {\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push(`#${elem.id}`);\n  }\n\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push(`.${classes[i]}`);\n    }\n  }\n  const attrWhitelist = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < attrWhitelist.length; i++) {\n    key = attrWhitelist[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n","import { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n","import { isThenable } from './is';\n\n/** SyncPromise internal states */\nenum States {\n  /** Pending */\n  PENDING = 'PENDING',\n  /** Resolved / OK */\n  RESOLVED = 'RESOLVED',\n  /** Rejected / Error */\n  REJECTED = 'REJECTED',\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<{\n    onfulfilled?: ((value: T) => T | PromiseLike<T>) | null;\n    onrejected?: ((reason: any) => any) | null;\n  }> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public toString(): string {\n    return '[object SyncPromise]';\n  }\n\n  /** JSDoc */\n  public static resolve<T>(value: T | PromiseLike<T>): PromiseLike<T> {\n    return new SyncPromise(resolve => {\n      resolve(value);\n    });\n  }\n\n  /** JSDoc */\n  public static reject<T = never>(reason?: any): PromiseLike<T> {\n    return new SyncPromise((_, reject) => {\n      reject(reason);\n    });\n  }\n\n  /** JSDoc */\n  public static all<U = any>(collection: Array<U | PromiseLike<U>>): PromiseLike<U[]> {\n    return new SyncPromise<U[]>((resolve, reject) => {\n      if (!Array.isArray(collection)) {\n        reject(new TypeError(`Promise.all requires an array as input.`));\n        return;\n      }\n\n      if (collection.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      let counter = collection.length;\n      const resolvedCollection: U[] = [];\n\n      collection.forEach((item, index) => {\n        SyncPromise.resolve(item)\n          .then(value => {\n            resolvedCollection[index] = value;\n            counter -= 1;\n\n            if (counter !== 0) {\n              return;\n            }\n            resolve(resolvedCollection);\n          })\n          .then(null, reject);\n      });\n    });\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._attachHandler({\n        onfulfilled: result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n            return;\n          }\n          try {\n            resolve(onfulfilled(result));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n        onrejected: reason => {\n          if (!onrejected) {\n            reject(reason);\n            return;\n          }\n          try {\n            resolve(onrejected(reason));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n      });\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        // tslint:disable-next-line:no-unsafe-any\n        resolve(val);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  // TODO: FIXME\n  /** JSDoc */\n  private readonly _attachHandler = (handler: {\n    /** JSDoc */\n    onfulfilled?(value: T): any;\n    /** JSDoc */\n    onrejected?(reason: any): any;\n  }) => {\n    this._handlers = this._handlers.concat(handler);\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    if (this._state === States.REJECTED) {\n      this._handlers.forEach(handler => {\n        if (handler.onrejected) {\n          handler.onrejected(this._value);\n        }\n      });\n    } else {\n      this._handlers.forEach(handler => {\n        if (handler.onfulfilled) {\n          // tslint:disable-next-line:no-unsafe-any\n          handler.onfulfilled(this._value);\n        }\n      });\n    }\n\n    this._handlers = [];\n  };\n}\n\nexport { SyncPromise };\n","// tslint:disable:no-unsafe-any\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\nexport class Memo {\n  /** Determines if WeakSet is available */\n  private readonly _hasWeakSet: boolean;\n  /** Either WeakSet or Array */\n  private readonly _inner: any;\n\n  public constructor() {\n    // tslint:disable-next-line\n    this._hasWeakSet = typeof WeakSet === 'function';\n    this._inner = this._hasWeakSet ? new WeakSet() : [];\n  }\n\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n  public memoize(obj: any): boolean {\n    if (this._hasWeakSet) {\n      if (this._inner.has(obj)) {\n        return true;\n      }\n      this._inner.add(obj);\n      return false;\n    }\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < this._inner.length; i++) {\n      const value = this._inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    this._inner.push(obj);\n    return false;\n  }\n\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n  public unmemoize(obj: any): void {\n    if (this._hasWeakSet) {\n      this._inner.delete(obj);\n    } else {\n      for (let i = 0; i < this._inner.length; i++) {\n        if (this._inner[i] === obj) {\n          this._inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n}\n","import { isRegExp } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\n\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const ll = newLine.length;\n  if (ll <= 150) {\n    return newLine;\n  }\n  if (colno > ll) {\n    colno = ll; // tslint:disable-line:no-parameter-reassignment\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, ll);\n  if (end > ll - 5) {\n    end = ll;\n  }\n  if (end === ll) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < ll) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (isRegExp(pattern)) {\n    return (pattern as RegExp).test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n","import { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { isElement, isError, isEvent, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { htmlTreeAsString } from './misc';\nimport { truncate } from './string';\n\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacement A function that should be used to wrap a given method.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacement: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacement(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry__: {\n          enumerable: false,\n          value: true,\n        },\n        __sentry_original__: {\n          enumerable: false,\n          value: original,\n        },\n        __sentry_wrapped__: {\n          enumerable: false,\n          value: wrapped,\n        },\n      });\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(\n      // tslint:disable-next-line:no-unsafe-any\n      key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`,\n    )\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all it's attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order to be usable by the serializer\n */\nfunction getWalkSource(\n  value: any,\n): {\n  [key: string]: any;\n} {\n  if (isError(value)) {\n    const error = value as ExtendedError;\n    const err: {\n      stack: string | undefined;\n      message: string;\n      name: string;\n      [key: string]: any;\n    } = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    };\n\n    for (const i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (isEvent(value)) {\n    const source: {\n      [key: string]: any;\n    } = {};\n\n    source.type = value.type;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      source.target = isElement(value.target)\n        ? htmlTreeAsString(value.target)\n        : Object.prototype.toString.call(value.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = isElement(value.currentTarget)\n        ? htmlTreeAsString(value.currentTarget)\n        : Object.prototype.toString.call(value.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    // tslint:disable-next-line:strict-type-predicates\n    if (typeof CustomEvent !== 'undefined' && value instanceof CustomEvent) {\n      source.detail = value.detail;\n    }\n\n    for (const i in value) {\n      if (Object.prototype.hasOwnProperty.call(value, i)) {\n        source[i] = (value as { [key: string]: any })[i];\n      }\n    }\n\n    return source;\n  }\n\n  return value as {\n    [key: string]: any;\n  };\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // tslint:disable-next-line:no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/** Transforms any input value into a string form, either primitive value or a type of the input */\nfunction serializeValue(value: any): any {\n  const type = Object.prototype.toString.call(value);\n\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  const normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\n// tslint:disable-next-line:cyclomatic-complexity\nfunction normalizeValue<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && typeof value === 'object' && ((value as unknown) as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  // tslint:disable-next-line:no-tautology-expression\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${value.name || '<unknown-function-name>'}]`;\n  }\n\n  return value;\n}\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\nexport function walk(key: string, value: any, depth: number = +Infinity, memo: Memo = new Memo()): any {\n  // If we reach the maximum depth, serialize whatever has left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  // If value implements `toJSON` method, call it and return early\n  // tslint:disable:no-unsafe-any\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  // tslint:enable:no-unsafe-any\n\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n  const normalized = normalizeValue(value, key);\n  if (isPrimitive(normalized)) {\n    return normalized;\n  }\n\n  // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n  const source = getWalkSource(value);\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n    // Recursively walk through all the child nodes\n    (acc as { [key: string]: any })[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  memo.unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\nexport function normalize(input: any, depth?: number): any {\n  try {\n    // tslint:disable-next-line:no-unsafe-any\n    return JSON.parse(JSON.stringify(input, (key: string, value: any) => walk(key, value, depth)));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  // tslint:disable:strict-type-predicates\n  const keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n","import { EventProcessor, Hub, Integration, Severity } from '@sentry/types';\nimport { fill, getGlobalObject, normalize, safeJoin } from '@sentry/utils';\n\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Send Console API calls as Sentry Events */\nexport class CaptureConsole implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = CaptureConsole.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'CaptureConsole';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _levels: string[] = ['log', 'info', 'warn', 'error', 'debug', 'assert'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { levels?: string[] } = {}) {\n    if (options.levels) {\n      this._levels = options.levels;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!('console' in global)) {\n      return;\n    }\n\n    this._levels.forEach((level: string) => {\n      if (!(level in global.console)) {\n        return;\n      }\n\n      fill(global.console, level, (originalConsoleLevel: () => any) => (...args: any[]) => {\n        const hub = getCurrentHub();\n\n        if (hub.getIntegration(CaptureConsole)) {\n          hub.withScope(scope => {\n            scope.setLevel(Severity.fromString(level));\n            scope.setExtra('arguments', normalize(args, 3));\n            scope.addEventProcessor(event => {\n              event.logger = 'console';\n              return event;\n            });\n\n            let message = safeJoin(args, ' ');\n            if (level === 'assert') {\n              if (args[0] === false) {\n                message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n                scope.setExtra('arguments', normalize(args.slice(1), 3));\n                hub.captureMessage(message);\n              }\n            } else {\n              hub.captureMessage(message);\n            }\n          });\n        }\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      });\n    });\n  }\n}\n"],"names":["LogLevel","Severity","Status","level","Debug","Info","Warning","Error","Fatal","Critical","Log","code","Success","RateLimit","Invalid","Failed","Unknown","setPrototypeOf","Object","__proto__","Array","obj","proto","prop","hasOwnProperty","message","_super","_this","name","_newTarget","prototype","constructor","tslib_1.__extends","isPrimitive","wat","isElement","Element","isSyntheticEvent","toString","call","isPlainObject","fallbackGlobalObject","getGlobalObject","process","global","window","self","consoleSandbox","callback","originalConsole","console","wrappedLevels","forEach","__sentry__","__sentry_wrapped__","__sentry_original__","result","keys","htmlTreeAsString","elem","currentElem","out","height","len","sepLength","length","nextStr","_htmlElementAsString","push","parentNode","reverse","join","_oO","className","classes","key","attr","i","tagName","toLowerCase","id","split","attrWhitelist","getAttribute","PREFIX","this","_enabled","Logger","_i","args","log","warn","error","__SENTRY__","logger","States","_hasWeakSet","WeakSet","_inner","Memo","has","add","delete","splice","safeJoin","input","delimiter","isArray","output","value","String","e","getWalkSource","isError","err","stack","Event","source","type","target","currentTarget","CustomEvent","detail","normalizeValue","_events","document","walk","depth","memo","Infinity","normalized","serializeValue","toJSON","acc","memoize","innerKey","unmemoize","normalize","JSON","parse","stringify","options","CaptureConsole","levels","_levels","_","getCurrentHub","replacement","original","wrapped","defineProperties","enumerable","_Oo","fill","originalConsoleLevel","hub","getIntegration","withScope","scope","setLevel","fromString","setExtra","addEventProcessor","event","slice","captureMessage","Function","apply"],"mappings":"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"}