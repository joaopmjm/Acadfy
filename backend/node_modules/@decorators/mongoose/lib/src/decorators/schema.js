"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const meta_1 = require("../meta");
/**
 * Defines Schema field
 * @param {*} type Field type
 */
function SchemaField(type) {
    return (target, name) => {
        meta_1.getMongooseMeta(target).schema[name] = type;
    };
}
exports.SchemaField = SchemaField;
/**
 * Defines static method or property
 */
function Static() {
    return (target, name, descriptor) => {
        meta_1.getMongooseMeta(target.prototype).statics.push(descriptor ? [name, target[name]] : name);
    };
}
exports.Static = Static;
/**
 * Defines query method
 */
function Query() {
    return (target, name) => {
        meta_1.getMongooseMeta(target).queries.push([name, target[name]]);
    };
}
exports.Query = Query;
/**
 * Defines instance method
 */
function Instance() {
    return (target, name) => {
        meta_1.getMongooseMeta(target).instances.push([name, target[name]]);
    };
}
exports.Instance = Instance;
/**
 * Defines virtual (computed) property (getter/setter)
 */
function Virtual() {
    return (target, name, descriptor) => {
        meta_1.getMongooseMeta(target).virtuals.push([name, descriptor]);
    };
}
exports.Virtual = Virtual;
/**
 * Defines index
 */
function Index() {
    return (target, name) => {
        meta_1.getMongooseMeta(target).indexes.push(name);
    };
}
exports.Index = Index;
/**
 * Defines pre-hoos
 *
 * @param {string} hookType
 * @param {string} actionType
 */
function Hook(hookType, actionType) {
    return (target, name) => {
        meta_1.getMongooseMeta(target).hooks.push([hookType, actionType, name]);
    };
}
exports.Hook = Hook;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RlY29yYXRvcnMvc2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0NBQTBDO0FBRTFDOzs7R0FHRztBQUNILHFCQUE0QixJQUFTO0lBQ25DLE1BQU0sQ0FBQyxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsRUFBRTtRQUNuQyxzQkFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDOUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUpELGtDQUlDO0FBRUQ7O0dBRUc7QUFDSDtJQUNFLE1BQU0sQ0FBQyxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsVUFBeUMsRUFBRSxFQUFFO1FBQzlFLHNCQUFlLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUpELHdCQUlDO0FBRUQ7O0dBRUc7QUFDSDtJQUNFLE1BQU0sQ0FBQyxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsRUFBRTtRQUNuQyxzQkFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RCxDQUFDLENBQUM7QUFDSixDQUFDO0FBSkQsc0JBSUM7QUFFRDs7R0FFRztBQUNIO0lBQ0UsTUFBTSxDQUFDLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxFQUFFO1FBQ25DLHNCQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQztBQUNKLENBQUM7QUFKRCw0QkFJQztBQUVEOztHQUVHO0FBQ0g7SUFDRSxNQUFNLENBQUMsQ0FBQyxNQUFXLEVBQUUsSUFBWSxFQUFFLFVBQThCLEVBQUUsRUFBRTtRQUNuRSxzQkFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUM7QUFDSixDQUFDO0FBSkQsMEJBSUM7QUFFRDs7R0FFRztBQUNIO0lBQ0UsTUFBTSxDQUFDLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxFQUFFO1FBQ25DLHNCQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUM7QUFDSixDQUFDO0FBSkQsc0JBSUM7QUFFRDs7Ozs7R0FLRztBQUNILGNBQXFCLFFBQWdCLEVBQUUsVUFBa0I7SUFDdkQsTUFBTSxDQUFDLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxFQUFFO1FBQ25DLHNCQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDLENBQUM7QUFDSixDQUFDO0FBSkQsb0JBSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRNb25nb29zZU1ldGEgfSBmcm9tICcuLi9tZXRhJztcblxuLyoqXG4gKiBEZWZpbmVzIFNjaGVtYSBmaWVsZFxuICogQHBhcmFtIHsqfSB0eXBlIEZpZWxkIHR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNjaGVtYUZpZWxkKHR5cGU6IGFueSk6IFByb3BlcnR5RGVjb3JhdG9yIHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwgbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgZ2V0TW9uZ29vc2VNZXRhKHRhcmdldCkuc2NoZW1hW25hbWVdID0gdHlwZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHN0YXRpYyBtZXRob2Qgb3IgcHJvcGVydHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFN0YXRpYygpIHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwgbmFtZTogc3RyaW5nLCBkZXNjcmlwdG9yPzogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8YW55PikgPT4ge1xuICAgIGdldE1vbmdvb3NlTWV0YSh0YXJnZXQucHJvdG90eXBlKS5zdGF0aWNzLnB1c2goZGVzY3JpcHRvciA/IFtuYW1lLCB0YXJnZXRbbmFtZV1dIDogbmFtZSk7XG4gIH07XG59XG5cbi8qKlxuICogRGVmaW5lcyBxdWVyeSBtZXRob2RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFF1ZXJ5KCkge1xuICByZXR1cm4gKHRhcmdldDogYW55LCBuYW1lOiBzdHJpbmcpID0+IHtcbiAgICBnZXRNb25nb29zZU1ldGEodGFyZ2V0KS5xdWVyaWVzLnB1c2goW25hbWUsIHRhcmdldFtuYW1lXV0pO1xuICB9O1xufVxuXG4vKipcbiAqIERlZmluZXMgaW5zdGFuY2UgbWV0aG9kXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBJbnN0YW5jZSgpIHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwgbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgZ2V0TW9uZ29vc2VNZXRhKHRhcmdldCkuaW5zdGFuY2VzLnB1c2goW25hbWUsIHRhcmdldFtuYW1lXV0pO1xuICB9O1xufVxuXG4vKipcbiAqIERlZmluZXMgdmlydHVhbCAoY29tcHV0ZWQpIHByb3BlcnR5IChnZXR0ZXIvc2V0dGVyKVxuICovXG5leHBvcnQgZnVuY3Rpb24gVmlydHVhbCgpIHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwgbmFtZTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpID0+IHtcbiAgICBnZXRNb25nb29zZU1ldGEodGFyZ2V0KS52aXJ0dWFscy5wdXNoKFtuYW1lLCBkZXNjcmlwdG9yXSk7XG4gIH07XG59XG5cbi8qKlxuICogRGVmaW5lcyBpbmRleFxuICovXG5leHBvcnQgZnVuY3Rpb24gSW5kZXgoKSB7XG4gIHJldHVybiAodGFyZ2V0OiBhbnksIG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGdldE1vbmdvb3NlTWV0YSh0YXJnZXQpLmluZGV4ZXMucHVzaChuYW1lKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHByZS1ob29zXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGhvb2tUeXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uVHlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gSG9vayhob29rVHlwZTogc3RyaW5nLCBhY3Rpb25UeXBlOiBzdHJpbmcpIHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwgbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgZ2V0TW9uZ29vc2VNZXRhKHRhcmdldCkuaG9va3MucHVzaChbaG9va1R5cGUsIGFjdGlvblR5cGUsIG5hbWVdKTtcbiAgfTtcbn1cbiJdfQ==