"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = require("mongoose");
const di_1 = require("@decorators/di");
const meta_1 = require("./meta");
/**
 * Quick helper function to link reference
 *
 * @param {String} collectionRef
 *
 * @returns { {type: "mongoose".Schema.Types.ObjectId, ref: string} }
 */
function ref(collectionRef) {
    return { type: mongoose_1.Schema.Types.ObjectId, ref: collectionRef };
}
exports.ref = ref;
/**
 * Create mongoose schema out of @decorators/mongoose class
 *
 * @param {MongooseClass} modelClass
 *
 * @returns {Object} Mongoose model itself
 */
function schema(modelClass) {
    const { meta, instance } = getArtifacts(modelClass);
    return buildSchema(meta, instance);
}
exports.schema = schema;
/**
 * Create mongoose model out of @decorators/mongoose class
 *
 * @param {MongooseClass} modelClass
 *
 * @returns {Object} Mongoose model itself
 */
function model(modelClass) {
    const { meta, instance } = getArtifacts(modelClass);
    const statics = {};
    meta.statics.forEach((stat) => {
        if (typeof stat[1] !== 'function') {
            statics[stat] = modelClass[stat];
        }
    });
    const newModel = mongoose_1.model(meta.name, buildSchema(meta, instance));
    /**
     * Extend model with statics
     */
    for (let key of Object.keys(statics)) {
        newModel[key] = statics[key];
    }
    return newModel;
}
exports.model = model;
/**
 * Build schema
 *
 * @param {MongooseMeta} meta
 * @param {any} classInstance
 *
 * @returns {Schema}
 */
function buildSchema(meta, classInstance) {
    let newSchema = new mongoose_1.Schema(meta.schema);
    let indexes = {};
    meta.statics.forEach((stat) => {
        if (typeof stat[1] === 'function') {
            newSchema.statics[stat[0]] = wrapFunction(stat[1], classInstance);
        }
    });
    meta.queries.forEach(([name, fn]) => {
        newSchema['query'][name] = wrapFunction(fn, classInstance);
    });
    meta.instances.forEach(([name, fn]) => {
        newSchema.methods[name] = wrapFunction(fn, classInstance);
    });
    meta.virtuals.forEach(([name, descriptor]) => {
        const virtual = newSchema.virtual(name);
        if (descriptor.get) {
            virtual.get(wrapFunction(descriptor.get, classInstance));
        }
        if (descriptor.set) {
            virtual.set(wrapFunction(descriptor.set, classInstance));
        }
    });
    meta.indexes.forEach((index) => {
        indexes[index] = classInstance[index];
        newSchema.index({ [index]: classInstance[index] });
    });
    // newSchema.index(indexes);
    meta.options.forEach(([option, value]) => {
        newSchema.set(option, value);
    });
    meta.hooks.forEach(([hookType, actionType, name]) => {
        newSchema[hookType](actionType, function (next) {
            /**
             * Hook expects to get exactly one parameter, so
             * wrapped function cannot be passed as an argument
             */
            return wrapFunction(classInstance[name], classInstance).call(this, next);
        });
    });
    return newSchema;
}
/**
 * Wrap function with correct context just to make sure,
 * that functions will be executed with scope of class
 * in order to get DI working properly
 *
 * @param {Function} fn
 * @param {any} instance
 *
 * @returns {Function}
 */
function wrapFunction(fn, instance) {
    return function (next) {
        let fullCtx = instance;
        if (this) {
            fullCtx = Object.assign({}, instance, (this || {}));
            Object.setPrototypeOf(fullCtx, Object.getPrototypeOf(this));
        }
        return fn.apply(fullCtx, [next]);
    };
}
/**
 * Extract meta and classInstance of the injectable
 *
 * @param {MongooseClass} modelClass
 *
 * @returns {{ meta: MongooseMeta, instance: MongooseClass }}
 */
function getArtifacts(modelClass) {
    const instance = getModel(modelClass);
    const meta = meta_1.getMongooseMeta(instance);
    return { meta, instance };
}
/**
 * Get model instance from container or instantiate one
 *
 * @param {MongooseClass} ModelClass
 *
 * @returns {MongooseClass}
 */
function getModel(ModelClass) {
    try {
        return di_1.Container.get(ModelClass);
    }
    catch (_a) {
        return new ModelClass();
    }
}
//# sourceMappingURL=data:application/json;base64,