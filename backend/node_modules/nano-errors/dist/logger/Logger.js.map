{"version":3,"file":"Logger.js","sourceRoot":"./lib/","sources":["logger/Logger.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AAEnC,4CAAyC;AACzC,oCAA4D;AAS5D,MAAa,MAAM;IAsBjB;;;;OAIG;IACH;QACE,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;IAC3G,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,MAAM,IAAI,qBAAS,CAAC,qCAAqC,CAAC,CAAC;SAC5D;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,UAAU,CAAC,UAAyB,EAAE;QAClD,oCAAoC;QACpC,MAAM,GAAG,GAAG;YACV,UAAU,EAAE,OAAO,CAAC,UAAU,IAAI,MAAM,CAAC,kBAAkB;SAC5D,CAAC;QAEF,qEAAqE;QACrE,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,iBACjC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,4BAAoB,EAAE,CAAC,IACnD,GAAG,EACN,CAAC;QAAA,CAAC;QAEJ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;SACxB;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;;AAvDD;;GAEG;AACI,yBAAkB,GAAiC;IACxD,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;QAC7B,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,OAAO;QACvC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,4BAAoB,EAAE,EACtB,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EACzB,kBAAU,EAAE,CACb;KACF,CAAC;CACH,CAAC;AApBJ,wBAgEC","sourcesContent":["import * as winston from 'winston';\nimport * as Transport from 'winston-transport';\nimport { BaseError } from '../BaseError';\nimport { enumerateErrorFormat, lineFormat } from \"../utils\";\n\nexport interface LoggerOptions extends winston.LoggerOptions {\n  transports?: Transport[];\n}\n\n// Export the winston.Logger type so we don't need to install the winston types on dependants\nexport type LoggerInstance = winston.Logger;\n\nexport class Logger {\n  /**\n   * The singleton logger instance, needs to be created using `Logger.initialize()`.\n   * \n   * @see Logger.initialize()\n   */\n  protected static instance: LoggerInstance;\n\n  /**\n   * The default transports thay will be enabled in the singleton.\n   */\n  static DEFAULT_TRANSPORTS: LoggerInstance['transports'] = [\n    new winston.transports.Console({\n      level: process.env.LOG_LEVEL || 'silly',\n      format: winston.format.combine(\n        enumerateErrorFormat(),\n        winston.format.colorize(),\n        lineFormat(),\n      ),\n    }),\n  ];\n\n  /**\n   * Simple logger constructor is deprecated, use SimpleLogger.initialize() instead.\n   *\n   * @deprecated\n   */\n  private constructor() {\n    throw new Error('Simple logger constructor is deprecated in Winston 3, use Logger.initialize() instead');\n  }\n\n  /**\n   * Gets the singleton Logger instance, if available.\n   */\n  public static getInstance(): LoggerInstance {\n    if (!this.instance) {\n      throw new BaseError('Logger has not been initialized yet');\n    }\n    return this.instance;\n  }\n\n  /**\n   * Initialize a new logger instance using Winston factory.\n   *\n   * @param options The logger initialization options\n   */\n  public static initialize(options: LoggerOptions = {}): LoggerInstance {\n    // Prepare default console transport\n    const opt = {\n      transports: options.transports || Logger.DEFAULT_TRANSPORTS,\n    };\n\n    // Construct new Winston logger instance with enhanced error handling\n    const logger = winston.createLogger({\n      format: winston.format.combine(enumerateErrorFormat()),\n      ...opt\n    });;\n\n    if (!this.instance) {\n      this.instance = logger;\n    }\n\n    return logger;\n  }\n}"]}