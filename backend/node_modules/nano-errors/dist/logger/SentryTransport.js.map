{"version":3,"file":"SentryTransport.js","sourceRoot":"./lib/","sources":["logger/SentryTransport.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uCAAuC;AACvC,qDAAqD;AACrD,+CAA+C;AAC/C,4CAAyC;AACzC,oCAA6C;AAK7C,MAAa,eAAgB,SAAQ,SAAS;IAI5C,YAAY,OAA+B;QACzC,KAAK,CAAC,OAAO,CAAC,CAAC;QAJD,SAAI,GAAG,QAAQ,CAAC;QAM9B,MAAM,CAAC,IAAI,iBACT,GAAG,EAAE,EAAE,EACP,WAAW,EAAE,KAAK,EAClB,OAAO,EAAE,KAAK,EACd,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,EACjC,gBAAgB,EAAE,IAAI,EACtB,IAAI,EAAE,EAAE,EACR,KAAK,EAAE,EAAE,EACT,YAAY,EAAE;gBACZ,IAAI,YAAY,CAAC,cAAc,EAAE;aAClC,IACE,OAAO,EACV,CAAC;IACL,CAAC;IAEK,GAAG,CAAC,IAAgD,EAAE,IAAgB;;YAC1E,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,OAAO,IAAI,EAAE,CAAC;aACf;YAED,MAAM,IAAI,GAAG,yBAAiB,CAAC,IAAI,CAAC,CAAC;YAErC,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,EAAE;gBAC1B,MAAM,KAAK,GAAG,IAAI,qBAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACxC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,qBAAS,CAAC,IAAI,CAAC;gBAC5C,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;aAChC;iBAAM;gBACL,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aAC3B;YAED,IAAI,EAAE,CAAC;QACT,CAAC;KAAA;CACF;AAvCD,0CAuCC","sourcesContent":["import * as Sentry from '@sentry/node';\nimport * as Integrations from '@sentry/integrations';\nimport * as Transport from 'winston-transport';\nimport { BaseError } from '../BaseError';\nimport { prepareSentryMeta } from '../utils';\n\nexport interface SentryTransportOptions extends Sentry.NodeOptions, Transport.TransportStreamOptions {\n}\n\nexport class SentryTransport extends Transport {\n  public readonly name = 'Sentry';\n  public options: SentryTransportOptions;\n\n  constructor(options: SentryTransportOptions) {\n    super(options);\n\n    Sentry.init({\n      dsn: '',\n      patchGlobal: false,\n      install: false,\n      environment: process.env.NODE_ENV,\n      attachStacktrace: true,\n      tags: {},\n      extra: {},\n      integrations: [\n        new Integrations.ExtraErrorData(),\n      ],\n      ...options,\n    });\n  }\n\n  async log(info: { level: string, tags: any, message: any }, done: () => void) {\n    if (this.silent) {\n      return done();\n    }\n\n    const meta = prepareSentryMeta(info);\n\n    if (info.level === 'error') {\n      const error = new BaseError(info, meta);\n      error.name = info['name'] || BaseError.name;\n      Sentry.captureException(error);\n    } else {\n      Sentry.captureEvent(meta);\n    }\n\n    done();\n  }\n}\n"]}