{"version":3,"file":"logger.utils.js","sourceRoot":"./lib/","sources":["utils/logger.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Sentry from '@sentry/node';\nimport jsonStringify from 'fast-safe-stringify';\nimport * as os from 'os';\nimport { MESSAGE } from 'triple-beam';\nimport { format, info } from 'winston';\nimport { BaseError } from '../BaseError';\n\nexport const lineFormat = format((info: any) => {\n  const stringifiedRest = jsonStringify({\n    ...info,\n    level: undefined,\n    message: undefined,\n    splat: undefined\n  }, null, 2);\n\n  const padding = info.padding && info.padding[info.level] || '';\n  if (stringifiedRest !== '{}') {\n    info[MESSAGE] = `${info.level}:${padding} ${info.message} ${stringifiedRest}`;\n  } else {\n    info[MESSAGE] = `${info.level}:${padding} ${info.message}`;\n  }\n\n  return info;\n});\n\n// Quick and dirty fix for Winston@3.0.0 issue with errors\n// @see {https://github.com/winstonjs/winston/issues/1338}\nexport const enumerateErrorFormat = format((info: any) => {\n  if (info.message instanceof BaseError) {\n    return {\n      message: info.message.message,\n      stack: info.message.stack,\n      ...info.message\n    };\n  }\n\n  if (info.message instanceof Error) {\n    return {\n      message: info.message.message,\n      stack: info.message.stack,\n      ...info.message\n    };\n  }\n\n  if (info instanceof BaseError) {\n    return {\n      message: info.message,\n      stack: info.stack,\n      ...info,\n    };\n  }\n\n  if (info instanceof Error) {\n    return {\n      message: info.message,\n      stack: info.stack,\n      ...info,\n    };\n  }\n\n  return info;\n});\n\n\nexport const winstonLevelToSentryLevel = {\n  silly: 'debug',\n  verbose: 'debug',\n  info: 'info',\n  debug: 'debug',\n  warn: 'warning',\n  error: 'error',\n  default: info,\n};\n\n\nexport const prepareSentryMeta = (info: { level: string, tags: any, message: any }): Sentry.Event | Error => {\n  const {\n    level,\n    tags,\n    modules,\n    platform = os.platform(),\n    server_name = os.hostname(),\n    ...extra\n  }: any = { ...info };\n\n  let stack: string | undefined;\n\n  // Generate mocked stack for objects\n  if (info.level !== 'error') {\n    const event = new Error(info.message);\n    event.name = info.level;\n    stack = event.stack;\n  }\n\n  const result = {\n    modules,\n    server_name,\n    platform,\n    extra: {\n      stack,\n      ...extra,\n    },\n    tags: {\n      platform,\n      stackId: extra.stackId,\n      ...tags,\n    },\n    message: info.message.message || info.message,\n    level: winstonLevelToSentryLevel[info.level],\n  };\n\n  return result;\n};"]}