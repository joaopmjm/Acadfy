{"version":3,"file":"BaseError.js","sourceRoot":"./lib/","sources":["BaseError.ts"],"names":[],"mappings":"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","sourcesContent":["import * as uuid from 'uuid';\nimport { inheritStackTrace } from './utils';\n\n/**\n * The base error details enables the developer to add\n * specific metadata to their errors.\n */\nexport class BaseErrorDetails {\n  [key: string]: any;\n\n  constructor(data = {}) {\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        this[key] = data[key];\n      }\n    }\n  }\n}\n\n/**\n * An enhanced error instance for the TS Framework.\n * <br />\n * Basic features:\n * - Unique stack id using UUID v4\n * - Serializers: toObject and toJSON\n * - Better stack trace mapping using \"clean-stack\"\n * - Inherits errors with rich stack trace and json outputs\n */\nexport class BaseError extends Error {\n  /**\n   * The unique exception id.\n   */\n  public stackId: string;\n\n  /**\n   * The error details for easier tracking of exceptions\n   */\n  public details: BaseErrorDetails;\n\n  /**\n   * The error original message without the generated metadata.\n   */\n  public originalMessage: string;\n\n  /**\n   * The `clean-stack` wrapper when available.\n   */\n  protected _cleanStack?: (input: string) => string;\n\n  constructor(input?: any, details: any = new BaseErrorDetails()) {\n    let message: string;\n    let originalMessage: string;\n    let stackId: string = uuid.v4();\n\n    if (input && input.message) {\n      // Handle input message from another error\n      message = input.message.split(' (stackId:')[0];\n      originalMessage = input.message;\n      stackId = input.stackId || details.stackId || stackId;\n    } else if (input && typeof input.toString === 'function') {\n      // Handle input message as string\n      message = input.toString();\n      originalMessage = input.toString();\n      stackId = input.stackId || details.stackId || stackId;\n    } else {\n      // We don't really know how to handle this case\n      // Passing on to prevent breaking changes, but this might catch up onto us\n      message = input;\n      originalMessage = input;\n    }\n\n    super(`${message} (stackId: ${stackId})`);\n    this.stackId = stackId;\n    this.originalMessage = originalMessage;\n    this.name = this.constructor.name;\n    this.details = details instanceof BaseErrorDetails ? details : new BaseErrorDetails(details);\n\n    // Prepare instance stack trace\n    if ((input && input.stack) || details.stack) {\n      // Tries to inherit original stack trace, input looks like an Error instance\n      this.stack = inheritStackTrace(this, input.stack || details.stack);\n    } else if (typeof Error.captureStackTrace === 'function') {\n      // Generates a new Stack Trace (available on v8 platforms)\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      // Fallback mode to simple error\n      this.stack = (new Error(this.message)).stack;\n    }\n\n    // External dependency for cleaning unuseful stack trace frames\n    if (require.resolve('clean-stack')) {\n      try {\n        // Try to get clean stack gracefully\n        this._cleanStack = require('clean-stack');\n      } catch (exception) {\n        console.warn('Dependency \"clean-stack\" is not supported in this platform, errors will be ignored', exception);\n      }\n    }\n  }\n\n  /**\n   * Generates plain object for this error instance.\n   */\n  public toObject() {\n    let stack = this.stack;\n\n    // External dependency for cleaning unuseful stack trace frames\n    if (this._cleanStack) {\n      try {\n        stack = this._cleanStack(this.stack);\n      } catch (exception) {\n        console.warn('Dependency \"clean-stack\" is not supported in this platform, errors will be ignored', exception);\n      }\n    }\n\n    return {\n      message: this.message,\n      stackId: this.stackId,\n      details: this.details,\n      // tslint:disable-next-line:object-shorthand-properties-first\n      stack,\n    };\n  }\n\n  /**\n   * Generates clean object for this error instance ready for JSON stringification (optional).\n   *\n   * @param stringify Flag to enable stringification\n   */\n  public toJSON(stringify: boolean = false): any {\n    const obj = this.toObject();\n    if (stringify) {\n      return JSON.stringify(obj);\n    }\n    return obj;\n  }\n}\n"]}